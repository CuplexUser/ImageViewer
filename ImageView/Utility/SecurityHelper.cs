using System.Security;
using System.Security.Cryptography;
using System.Text;

namespace ImageViewer.Utility
{
    public static class SecurityHelper
    {
        private static readonly byte[] RndBytes = new byte[] {0x8E, 0x51, 0xEB, 0x52, 0x7C, 0xA0, 0x1, 0xE1, 
            0x73, 0x69, 0x3D, 0x3E, 0xEC, 0x26, 0x49, 0xCD, 
            0x82, 0xC7, 0x39, 0x9F, 0xA6, 0x7D, 0x98, 0x98, 
            0xC6, 0x2B, 0xCF, 0x6F, 0x5B, 0x86, 0x29, 0x60, 
            0x1, 0x62, 0xFC, 0x1A, 0x31, 0x71, 0x60, 0xD3, 
            0xD1, 0xC8, 0xAC, 0x62, 0xE8, 0xA, 0x9E, 0x7, 
            0xE8, 0xAD, 0xB7, 0xBB, 0x32, 0x81, 0x2, 0x2B, 
            0x23, 0x7D, 0xB4, 0xF8, 0x95, 0xFC, 0x7D, 0x6E, 
            0x4C, 0xBC, 0x8, 0x42, 0xB4, 0xC, 0xDA, 0x2D, 
            0x9B, 0x2A, 0x9, 0x7C, 0x29, 0xFC, 0x43, 0x39, 
            0xE5, 0x6, 0xDF, 0x8, 0xAB, 0xDF, 0x1E, 0x98, 
            0x91, 0x5B, 0x86, 0xE8, 0x33, 0xD8, 0x84, 0x46, 
            0x19, 0x35, 0x9B, 0xD2, 0x59, 0x19, 0xB2, 0x74, 
            0xD3, 0xFF, 0x27, 0x8C, 0xDF, 0xDA, 0xEF, 0x6B, 
            0x7F, 0xBF, 0x70, 0x1C, 0x1E, 0x5C, 0xAD, 0x15, 
            0x42, 0x7E, 0x33, 0x67, 0x4E, 0x77, 0xBF, 0x62, 
        };  

        [SecuritySafeCritical]
        public static string GetSecurePassword(string password)
        {
            Rfc2898DeriveBytes deriveBytes= new Rfc2898DeriveBytes(password,RndBytes,1000);
            var dataBytes = deriveBytes.GetBytes(512);
            return Encoding.UTF8.GetString(dataBytes);
        }

        public static string GenerateSalt(int length)
        {
            RNGCryptoServiceProvider rngCrypto = new RNGCryptoServiceProvider();
            byte[] data = new byte[length];

            rngCrypto.GetBytes(data);

            var sb=new StringBuilder();
            sb.Append("private static readonly byte[] SALT = new byte[] {");

            int counter = 0;

            foreach (byte b in data)
            {
                counter++;
                if (counter % 10 == 0)
                {
                    sb.AppendLine($"0x{b:X}, ");
                }
                else
                {
                    sb.Append($"0x{b:X}, ");
                }
            }

            sb.Remove(sb.Length - 1, 1);
            sb.Append(" };");

            return sb.ToString();
        }
    }
}